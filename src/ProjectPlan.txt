(Step 1) I have a useless main menu setup for now. Next is to set up the game of connect 4.
This is going to be the local pvp mode for the game.
The whole component is called LocalGame.

The components that make it are the following:  DONE
- Board
    - Holds image of board (How do I draw holes in the board for the game pieces?)
        - Draw a rectangle board in middle
        - Draw grid of circles w/ bg_color
    - Column: takes piece, animates fall, stops on top of stack in column
    - Hold the board data class which will check for the win condition
    - Keeps track of player turns
- BottomMenu: holds forfeit button
- LocalGame holds player info (In local, just has the player skins)

(Step 2) I have completed the non-functional UI of the local game. Time to add function.
- Column Component:
    - Each column in Board is a transparent button
    - on hover draw appropriate game piece above column
    - on click animate falling piece, stop when reach top of stack
        - call hook with the index of the column clicked
- GamePiece Component:
    - Handles the animation for a game piece in the board
- BoardData class (I already have a python version):
    - Keeps track of piece positions and when player wins
    - Keeps track of current player on it's own as well
    - Calls hook when a player wins
- GameMenu:
    - need to use state for timer
    - need to update UI on win
- LocalGame contains player info
    - Skins for each player's piece
        - I want to have a lot of skin options, so images. 
        - I don't know how to make them fit perfectly in the game piece holes.
        - For now, a couple of default skin images.
    - Current player turn
    - That's it for the local version
- Set up gh for version management

(Progress Report:)
Half-way done. I've set up the game board and got it working I think.
Here's some things I have to come back to:
- Removing of empty slots (I'm not)
- The use of useState with the boardData instance
- Make the animation look a bit nicer
- Get a more pastel red for the red piece
- Proper testing of everything
- Reorganize directory structure (DONE)



Questions:
- Is the structure of this okay?
- Is this professional enough? Clean code. Error checking.

- When should I use things like hooks (UseEffect, UseState, other)?
Using Hooks:
useState: Use this for managing local state within a component, such as the current player's turn or the state of the game board.
useEffect: Use this for side effects, such as fetching data, setting up a subscription, or manually changing the DOM in React components.
Other Hooks: Other hooks like useContext (for accessing context), useReducer (for more complex state logic), and custom hooks can be used as needed based on your application's requirements.
When to Use Hooks: Generally, use hooks when you need to add state or lifecycle behavior to functional components. They help keep your components modular and reusable.

- Other important React features I should be using? 2
Context API: Useful for passing data deeply through your component tree without having to explicitly pass props at every level. LATER
React Router: If your game grows to include multiple views or pages, React Router can help manage navigation. DONE
Error Boundaries: Use these to catch JavaScript errors anywhere in your component tree and display fallback UIs. PULL BACK UP ROUTES???

- Should handle security right now as well, or later?
- Should I have a site theme config that holds the theme colors? DONE (App.css)
